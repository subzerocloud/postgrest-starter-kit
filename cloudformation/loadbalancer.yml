AWSTemplateFormatVersion: 2010-09-09
Description: PostgREST Starter Kit Load Balancer
Parameters:
  ClusterName:
    Type: String
    Description: "Name of the ECS cluster created with the wizard"
  CertificateArn:
    Type: String
    Description: "Provide full IAM/ACM certificate ARN to also serve HTTPS"
  Vpc:
    Type: String
    Description: "Vpc of the ECS cluster"
  EcsSecurityGroup: 
    Type: String
    Description: "Security Group of the ECS cluster"
  PubSubnetAz1: 
    Type: String
    Description: "Subnet 1 of the ECS cluster"
  PubSubnetAz2:
    Type: String
    Description: "Subnet 2 of the ECS cluster"
Outputs:
  ExternalElbHost:
    Description: "Internet-facing load balancer host name"
    Value: !GetAtt ExternalLoadBalancer.DNSName
  HttpListener:
    Description: "Add listener rules to this listener"
    Value: !Ref ExternalListenerHttp
    Export:
      Name: !Sub "${ClusterName}-HttpListener"
  HttpsListener:
    Description: "Add listener rules to this listener"
    Value: !If
      - HasSslCertificate
      - !Ref ExternalListenerHttps
      - "N/A"
    Export:
      Name: !Sub "${ClusterName}-HttpsListener"
  ServiceRole:
    Description: "ECS Service Role for joining load balancer"
    Value: !Ref ServiceRole
    Export:
      Name: !Sub "${ClusterName}-ServiceRole"
  Vpc:
    Description: "VPC ID from ECS Cluster Wizard"
    Value: !Ref Vpc
    Export:
      Name: !Sub "${ClusterName}-Vpc"
Conditions:
  HasSslCertificate: !Not [ !Equals [ !Ref CertificateArn, "" ] ]
Resources:
  # Create the load balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow ELB access from internet"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
  LoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: "tcp"
      FromPort: "32768"
      ToPort: "65535"
      SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
  ExternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: "internet-facing"
      Subnets:
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "50"
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
  PlaceholderTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/rest/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      UnhealthyThresholdCount: 3
      VpcId: !Ref Vpc
  ExternalListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref ExternalLoadBalancer
      DefaultActions:
        - TargetGroupArn: !Ref PlaceholderTargetGroup
          Type: forward
  ExternalListenerHttps:
    Condition: HasSslCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn
      LoadBalancerArn: !Ref ExternalLoadBalancer
      DefaultActions:
        - TargetGroupArn: !Ref PlaceholderTargetGroup
          Type: forward
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "EcsRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"
